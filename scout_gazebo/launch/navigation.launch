<launch>]

    <include file="$(find fast_lio)/launch/mapping_velodyne.launch"/>


    <include file="$(find patchworkpp)/launch/test.launch"/>

    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.15" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="10.0" />

        <!--max/min height for occupancy map, should be in meters-->
         <!-- 保留的z轴范围内的点 -->
        <param name="pointcloud_max_z" value="1.5" />
        <param name="pointcloud_min_z" value="0.2" />
		<!-- data source to integrate (PointCloud2) -->

		<remap from="cloud_in" to="/cloud_registered" />
	
	</node>


     <!-- 将完整点云转换为激光扫描用于2D导航 -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
    <remap from="cloud_in" to="/cloud_registered"/>
    <remap from="scan" to="base_scan"/>
    
    <rosparam>
        target_frame: base_link # Leave disabled to output scan in pointcloud frame
        transform_tolerance: 0.01
        min_height: -0.1
        max_height: 0.6

        angle_min: -3.1415926 # -M_PI
        angle_max: 3.1415926 # M_PI
        angle_increment: 0.003 # 0.17degree
        scan_time: 0.1
        range_min: 0.1
        range_max: 50
        use_inf: true
        inf_epsilon: 1.0

        # Concurrency level, affects number of pointclouds queued for processing and number of threads used
        # 0 : Detect number of cores
        # 1 : Single threaded
        # 2->inf : Parallelism level
        concurrency_level: 1
    </rosparam>
    </node>

    <!-- 直接将FastLIO的坐标系接入标准机器人坐标系 -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_camera_init"
        args="0 0 0 0 0 0 map camera_init" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="camera_init_to_odom"
        args="0 0 0 0 0 0 camera_init odom" />    

    <node pkg="tf2_ros" type="static_transform_publisher" name="body_to_base_link"
        args="0 0 0 0 0 0 body base_link" />    
   


    <!-- 启动 move_base 2D导航框架 -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <remap from="odom" to="/Odometry"/>
        <remap from="scan" to="/base_scan"/>


        <rosparam file="$(find scout_gazebo)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find scout_gazebo)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find scout_gazebo)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find scout_gazebo)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find scout_gazebo)/param/planner.yaml" command="load" />
        <param name="base_global_planner" value="global_planner/GlobalPlanner" />
        <param name="planner_frequency" value="1.0" />
        <param name="planner_patience" value="5.0" />
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS" />
        <param name="controller_frequency" value="5.0" />
        <param name="controller_patience" value="15.0" />
        <param name="clearing_rotation_allowed" value="true" />
    </node>
		 <!-- 需要用navigation对应的rviz，默认rviz不能发布目标点，ps：不知道问题在哪 
		<node pkg="rviz" type="rviz" name="octomap_rviz" args="-d $(find scout_gazebo)/worlds/1.rviz" /> -->
		


</launch>